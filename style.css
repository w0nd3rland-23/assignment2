*{
  box-sizing: border-box;
  background-origin: border-box;
  margin: 0;
  background-color: var(--col-01);
}

/* Basis for colour palette comes from 1bit Monitor Glow Palette by Polyducks */
/* https://lospec.com/palette-list/1bit-monitor-glow */
/* you're welcome to change the colours if you want or any of the other general page style */

/* With the colour palette, I wanted to make it relaxing and calm. I made an gradient image in 
illustrator to use as the background image, and und used similar colours from this image for my 
audio controls and text to attempt to create a cohesive design overall. In order to ensure that 
there was a good level of contrast, I changed the colours, testing them with webaim.org. I found 
this process difficult at points, as with my icons changing when hovered over, I had to contrast 
both the static colour and the hover colour with the background, while still ensuring they were 
different from each other. 

I additionally made the icons in illustrator, so I had control over the shapes used within them and so that I could make a cohesive set of icons. I chose white for the foreground text and icons as it had good contrast and makes the design cleaner*/

:root{
  --col-01:#15423f;
  --col-02:#110942;
  --col-03:#5252ff;
  --col-04:#b6e878;
  --col-05:#8EB3B8;
  --col-06:#e9e7e7;
  --border: 1px solid var(--col-02);
}

.audio-player-wrapper{
  display: flex;
  flex-direction: column;
  width: 50%;
  margin: 0 auto;
  padding: 5rem;
}

/* becuase I want to overlay the play icon on the audio they need to be in their own wrapper */
.audio-element-wrapper{
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
}

#audioElement{
  width: 100%;
  grid-column: 1/2;
  grid-row: 1/2;
}

#heroImage{
  width: 102%;
  grid-column: 1/2;
  grid-row: 1/2;
}

#audioPlayOverlay{
  width: 8rem;
  height: 8rem;
  grid-column: 1/2;
  grid-row: 1/2;
  justify-self: center;
  align-self: center;
  opacity: 0.1;
  pointer-events: none;
  display: none;
  border-radius: 100px;
 
}

.audio-controls-wrapper{
  display: flex;
  justify-content: center;
}

/* this overwrites the above display:flex - something which is then undone when the JS loads */
#controlsWrapper{
  display: none;
}

.audio-control-button{
  width: 2rem;
  height: 2rem;
  padding: .1rem;
  border: none;
  cursor: pointer;
 
}


.audio-control-button:hover{
  background-color: var(--col-05);
}


.audio-control-button:active{
  background-color: var(--col-06);
}
.button-icon{
  pointer-events: none;
}

#playButton{
  background-image: url('./icons/play.svg');
}
/* I have added css to make the buttons scale up when hovered over. 
I wanted to do this to make the overall design more responsive, however 
it is flawed as after you have clicked the icon, the hover does not work again. 
I have attempted to work around this, however have not been able to find a solution. */
 #playButton:hover{
  background-image: url('./icons/pause-colour.svg');
  transform: scale(1.2);
}

#muteButton:hover{
  background-image: url('./icons/unmute-colour.svg');
  transform: scale(1.2);
}

#loopButton:hover{
  background-image: url('./icons/loop-on.svg');
  transform: scale(1.3);
} 

#muteButton{
  background-image: url('./icons/mute.svg');
}

/* My added interactive button for the looping feature. The responsive feedback I opted to add was a new icon, with a new colour, once the button has been clicked. I thought this would be a good way for users to quickly see whether loop is enabled through this feedback. An improvement could be changing the shape of the button, as well as the colour, to make it more responsive. */
#loopButton{
  background-image: url('./icons/loop-off.svg');
}



.audio-progress-bar{
  /* Reset the default appearance */
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border: none;
  height: 2rem;
  flex-grow: 1;
  cursor: pointer;
  background-color: var(--col-06);
  box-shadow: 0 1px 2px var(--col-02) inset;
}
::-moz-progress-bar {
  background-color: var(--col-06);
}

::-webkit-progress-bar {
  background-color: var(--col-01);
  box-shadow: 0 1px 2px var(--col-06) inset;
}
::-webkit-progress-value {
  background-color: var(--col-06);
}

.timeline-loading{
  background-image: -moz-repeating-linear-gradient(45deg, var(--col-03) 0% 2%, transparent 2% 4%, red 4%);
  background-size: 200% 100%;
  animation: loadingAnimation 4s linear infinite;
}

@keyframes loadingAnimation {
  100%{
    background-position: 50% 0%;
  }
}


#attribution{
padding: 10rem;
text-align: center;
}

/* For this text, I have used https://webaim.org/resources/contrastchecker/ to check the contrast of the text against the background, to ensure that my website meets accessibility  standards through WCAG. This text meets the AA standard rating for regular text. */

a{
  text-align: center;
  color: var(--col-06);
  border-radius: 10px;
  padding: 2px;
  font-family: Kanit, sans-serif;
}
